a = b; //swap values
if a is in  A: //a is an instance of A
   b = ask("input a message:") //input
   say("a is in A!") //print

if a is not in A: //a is not an instance of A
   pass

class A from B:

	.sfielda, .sfieldb? =3; //null instance value

	..: //static init block
		.sfielda, .sfieldb = 1, 2;
	;

	nullable?; 
	.: //instance init block
		.af , .bf = 3, 4;
		a = .nullable?.t:1; //1 if .nullable == nil: .nullable.t
		a = .nullable?(2):0; //0 if .nullable==nil: .nullable(2)
	;

	def .(a,b): //constructor, static call to the class
		.a, .b = a, b;
        ..sfielda += 1; //access class field in an instance method
        .sfielda = 5; //create an instance field with the same name
	;
	//when a parameter is attached, 
	//its value is assigned on invocation
	def .(.a, .b); //constructor, same as above

	def .() = (0,0); //constructor chaining
	def .(a) = (a,0); //constructor chaining
	def .(a) = (T,0); //constructor chaining

	def meth(); //abstract method
	def meth2(): ; //empty method

    for i in 0..10: //range: no ommission of start
      case i:
		in 0, 1: 
			puts("break by default");
		in 2:
			puts("there is more");
			continue case; 
		else: puts("here is more");
	  ;
	;

	//constant definition
	PI: 3.1415926;
	//constant definition
	def PI as 3.1415926;

	//these probably clatters up the syntax:
    for j in lists , i in 1++: puts(i); ; //i is the counter
    for j in lists , i in ++: puts(i); ; //i is the counter from 0
    for j in lists , i in --: puts(i); ; //i is the counter from 0
    for j in lists , i in --3: puts(i); ; //the counter steps by -3
    for j in lists , i in 1++3: puts(i); ; //the counter steps by 3
    for j in 1..10++2 , i in 1++3: puts(i); ; //the counter steps by 3
    for j in 10..0--2 , i in 1++3: puts(i); ; //the counter steps by 3

    //the target of '<<' and '>>' can be a function, an array, or a stream
	for j in box: j,, sin(j) >> output; ;//sends items one at a time
	for j in box: j, sin(j) >> output; ;//same as: output.append(j,sin(j)) 
	for j in box: j, sin(j),, i,cos(i) >> output; ;//sends items one at a time
	for j in box: i,, j << input; ;//read items in one at a time
	for j in box: i, j << input; ;//read one item with two components? 

	//for i=0; i<12; i+=1 as k in 1++: ; //old style "for"

	for (j in box): ; //as a condition, zero-base counter k 
	as i <= 12, for k in 0..: ; //while, zero-base counter k 
	for j in box, as i <= 12: ; //paralell for 

	for j in box, k in 0.. : ; //for j in box @k: ; 
	for j in box, k in 1 .. ++3: ; //for j in box @k=1++3: ; 

	[(i,j) for i in 1..3 for j in 3..5] //nested
	[(i,j) for i in 1..3, j in 3..5] //paralell
	
	as true: ; //forever, empty body
	for i in s, j in t, k > 0:  //parallel
	;

	as i < 10: ;//while condition

	//put a '?' before a value to convert to bool
	as i in s: //while condition
		1 : tout; //print in terminal
		1,2,3, : tout; //print in terminal, without newline
		a = "give me a number" : input; //read from terminal
		2 >>> 1 == 1; //shift right
		2 <<< 1 == 4; //shift left
	;

	//cast/coersion: a pair in parenthesis
    a = (int k) * 3;

	if i in s: 
	;

	label for ..: //as if with a range from 0 to infty
		break label if a>b;
	;

	def . int get(str a, int a):
		int a = 3;
    ;
;

class *generic: //generic class, field types vary
	def .(a,b): 
		.*a=a; .b=b; //field a can differ in type
	;
;

//weak ref?
:a: = 3;

