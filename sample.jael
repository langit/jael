class A from B:

	.sfielda, .sfieldb ?3; //null instance value
	def ..: //static init block
		.sfielda, .sfieldb = 1, 2;
	;

	nullable?; 
	def .: //instance init block
		.af , .bf = 3, 4;
		a = .nullable?.t:1; //1 if .nullable == nil: .nullable.t
		a = .nullable?(2):0; //0 if .nullable==nil: .nullable(2)
	;

	def .(a,b): 
		.a, .b = a, b;
	;
	def .() < (0,0); //constructor chaining
	def .(a) < (a,0); //constructor chaining

	def meth(); //abstract method
	def meth2(): ; //empty method

    for i in 0..10:
      case i:
		in 0, 1: 
			puts("break by default");
		; 
		in 2:
			puts("there is more");
			continue case; 
		;
		else: puts("here is more");
	  ;
	;

	//constant definition
	PI as 3.1415926;

	//these probably clatters up the syntax:
    for j in lists as i in 1++: puts(i); ; //i is the counter
    for j in lists as i in ++: puts(i); ; //i is the counter from 0
    for j in lists as i in --: puts(i); ; //i is the counter from 0
    for j in lists as i in --3: puts(i); ; //the counter steps by -3
    for j in lists as i in 1++3: puts(i); ; //the counter steps by 3
    for j in 1..10++2 as i in 1++3: puts(i); ; //the counter steps by 3
    for j in 10..0--2 as i in 1++3: puts(i); ; //the counter steps by 3

    //the target of '<<' and '>>' can be a function, an array, or a stream
	for j in box: j,, sin(j) >> output; ;//sends items one at a time
	for j in box: j, sin(j) >> output; ;//same as: output.append(j,sin(j)) 
	for j in box: j, sin(j),, i,cos(i) >> output; ;//sends items one at a time
	for j in box: i,, j << input; ;//read items in one at a time
	for j in box: i, j << input; ;//read one item with two components? 

	//for i=0; i<12; i+=1 as k in 1++: ; //old style "for"

	for (j in box): ; //as a condition, zero-base counter k 
	for i <= 12 as k in ..: ; //while, zero-base counter k 
	for i <= 12 as j in box: ; //paralell for 

	for j in box as k in .. : ; //for j in box @k: ; 
	for j in box as k in 1 .. ++3: ; //for j in box @k=1++3: ; 

	[(i,j) for i in 1..3 for j in 3..5] //nested
	[(i,j) for i in 1..3  as j in 3..5] //paralell
	
	for ..: ; //forever, empty body

	label for ..: //as if with a range from 0 to infty
		break label if a>b;
	;

	def .int get():;
;
