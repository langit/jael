//"""x=''///*.ps/.match("abc.ps")'';""";

.public_global_field
.:package_global_field
.::private_global_field

//if referred to by methods (a closure reference), 
//a local_variable can be simply implemented the same 
//way as a private_global_field: private static field 
//of the module class
local_variable
//local statements...

int[,,] x = [int](2,3);

def .public_global_meth():
def .:package_global_meth():
def .::private_global_meth():
def local_meth():

//interface (explicit rather than implied)
def if iface from parent_if;

class Planet 
{ //enum class!
     MERCURY(3.303e+23, 2.4397e6),
     VENUS  (4.869e+24, 6.0518e6),
     EARTH  (5.976e+24, 6.37814e6),
     MARS   (6.421e+23, 3.3972e6),
     JUPITER(1.9e+27,   7.1492e7),
     SATURN (5.688e+26, 6.0268e7),
     URANUS (8.686e+25, 2.5559e7),
     NEPTUNE(1.024e+26, 2.4746e7)
}:

	def .(mass, radius):
        .mass = mass;      // in kilograms
        .radius = radius;  // in meters
    ;

    def surface_gravity:
         // universal gravitational constant  (m3 kg-1 s-2)
         G@final = 6.67300E-11;
         return G * .mass / (.radius * .radius);
    ;
;

class m from n in some_interface:
    //invisible scope
	.public_static_field 
    .:package_static_field
    .:-protected_static_field
    .::private_static_field

    public_instance_field
    :package_instance_field
    :-protected_instance_field
    ::private_instance_field

    def ..: //static initializer
        for i in 3...4: //inclusive range
            puts i
        for i in 3..4: //non-inclusive range
            puts i

    def .: //instance common initializer
      .:package_access
      .public_access 
      .::private_access
      local_variable

    def .public_static_meth():
    def .:package_static_meth():
    def .:-protected_static_meth():
    def .::private_static_meth():

    def public_instance_meth():
    def :package_instance_meth():
    def :-protected_instance_meth():
    def ::private_instance_meth():
