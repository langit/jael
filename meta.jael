'''this is a meta program.
when it is expanded, the line numbers has two parts:
the source part shows the line number for the location 
of the expansion in the source code, and there is also
an expansion part, which shows the line number within
the expanded block of code. For example: 23.1:0 is the 
number given to the first line of the block 
from a meta expansion on source code line 23 position 1.  
'''

//macros will be expanded, technically they are templates.

//we will implement a template system for the macros.
//this template system can also help translate jael into 
//a target language such as Java after type inference.

//imported macros are put into each module's macro list
//imediately (you only need to import masters, slaves
//will automatically follow their masters) while parsing,
//therefore it requires the parsing of the imported one first.
#import * from some.package; //import macros only

//bundle: (1, "a", 3.0) //length can't change
//const bundle: (: x = 1, "a", 3.0 :) //no item change 
//fixed length list: [: 1,2,3 :] //array!


//possible syntax for using macro demands:
macroStmt: MACOM exprlist (':' stmt+)? ';';


//the first pass happens at parsing...
//the main purpose is to build namespaces
//so we will be able to know macro commands
//thus in lexer we can distinguish on the fly
//if an ID is a macro command or not (MACOM)

//in parser file:
tokens {MACOM, SLAVE}
ID: [a-zA-Z]+ 
    {
       if(JaelParser.isMACOM(getText())) setType(JaelParser.MACOM);
       if(JaelParser.isSLAVE(getText())) setType(JaelParser.SLAVE);
    }
;

//a macro can't be MACOM and SLAVE at the same time.
//no ID can be a MACOM or SLAVE.
//assume MACOM/SLAVE defined *before* use.
//another syntax (don't allow MACOM, SLAVE as ID in params)
slavekeys: 'in'|'else'|'or'|'and'|'got'|'is'|'as'|'from';
slave: (SLAVE|slavekeys) macroBody; //may use some keywords
macroBody: params ((':' stmts)? slave*)? ;
macroStmt: MACOM macroBody ';' ; //master must be unique

//this is a macro, master is from, slave is to.
//when there is no stmts in between, ':' can be omitted.
from "source" to "dest";

//example: (parser/lexer switch to template mode)
#:repstmt=
	'repeat' ':' stmts as block 'until' expr as cond ';'
:
     while true:
       ''block''
       if cond: break;
     ;
#repstmt;

//convert an if-stmt:
#:ifstmt=
       @if expr as ifcond ':' stmts as ifblock ';'
          * @elif expr as elifconds ':' stmts as elifblocks ';'
          ? @else ':' stmts as elseblock ';'
: 
  if (''ifcond''){
   ''ifblock''
  } #
  #for cond in elifconds,
      stmts in elifstmts:
   else if (''cond''){
     ''stmts''
   } # 
  #end for

  #if elseblock:
   else{ 
     ''elseblock'' 
   }
  #end if
#ifstmt;

#:stmt= (defstmt | ifstmt | forstmt) as one:
#case one.class:
#in defstmt:
#end case
#stmt;

#:defstmt =
     'def' [ID: //push into current scope
        overwrite = warning("Warning: overwrite def" ID) ] 
     { //new local scope 
           '(' paramlist ')' ':' stmts ';' 
     } //local scope ends
:
//define methods and properties for defstmt
# def @type(): ... //logic of method
# @uname = str(ID)+'$'+str(scope.depth)+'$';

# @def local_function(): ...

#defstmt;

//pre, post, prepost
#:ifstmt[type=prepost]=
       'if' expr { stmts_if } 
           *'elif' expr_elif { stmts_elif } 
           ?'else' { stmts_else }
:
  #case expr.type:
  #in bool:
    @if ( ''expr'' ) //literal if, no more expanding 
  #in int, float:
    @if (''expr'' != 0) 
  #in str, list, tuple:
    @if (''expr''?.length > 0) 
  #else:
    @if (''expr''?.bool())
  #case;

  { ''stmts_if: join=";\n"'' }


  #for expr in expr_elif, stmts in stmts_elif:
   @else{
     #case expr.type:
     #in bool:
        @if ( ''expr'' ) 
     #in int, float:
       @if (''expr'' != 0) 
     #in str, list, tuple:
       @if (''expr''?.length > 0) 
     #else:
       @if (''expr''?.bool())
     #end
     { ''stmts: join=";\n"'' }
   }
  #for;

  #if stmts_else:
   @else{ ''stmts_else: join=";\n"''; }
  #if;

#ifstmt;


a = x div y overflow "too bad!";
//Define an operator (if div:-3, it is left association): 
//assoc=left/right, postfix/prefix
#:div[priority=3,left,prefix]= expr1 @div expr2 @overflow msg: 
    customdiv(expr1, expr2, msg)
    //expr1.div(expr2, msg) 
	//note: it will be interpreted as (expr1).div(expr2, msg)
    //because expr1 is clearly an inseparable entity.
    //this is done to avoid the same problems in C macros
#div;
//they will be pushed to the parser or stack.
//we define tokens representing operators of certain priority
//tokens{OP1, OP2, OP3, OP4, OP5, OP6, OP7, OP8, OP9, OP10, OP11}
//lexer would do this: 
//OPERATOR: [!##$%^&*?/|<>][!##$%^&*?/|<>][!##$%^&*?/|<>]?
//           {setType(JaelParser.getCustomOpType(getText()));};
//and the same can be done with lexer rule ID to allow for 
//more plain operator names like: div, push, etc.

//may even magically switch the mode of the lexer
//mode=ID: text, csv, json
//text mode [text]: text to the end of line (comments?)
//text mode [text;]: text must end with ';' at end of line, 
//which then allows for multi-line text
//text mode [text:]: text must end with ':' at end of line?

slaveSpec: '#' (ID{JaelParser.addSlave($ID.getText());}
                 |SLAVE|slavekeys) ('?'|'*'|'+') ('['mode=ID']')?
           (params=exprlist)? ('{' block=ID '}')?; 

//master def
macroDefStmt: '#def' name=ID {JaelParser.addMACOM($ID.getText());}
  ('['mode=ID']')? exprlist? ('{' block=ID '}')? slaveSpec* ':' stmts ';'
; 

//register lexers under different names
//to make it possible to extend?
//then must agree on a predifined set of tokens 
#:hostname{text}= text :
     config.hostname = "''text''";
#hostname;

hostname bizwar.pku.edu:80
//config.hostname = "bizwar.pku.edu:80";

ifdef winnt_module: //[text:]
   
end //text mode, with the ';' omitted

//example: 'for' construct as a macro?
#:forstmt= for exps '{' stmts '}':
  #for e in exps:
     temp$''e.left'' = ''e.right'';
  #end

  while true:
     try:
  #for e in exps:
     #assert e.operator == 'in' and e.left.tokens.length == 1 
             and e.left.token[0].id == TOKENS.ID;
        ''e.left'' = next(temp$''e.left'');
  #end
     catch StopIteration e:
        break;
     ;
     ''stmts''; //if stmts contains ';' already?
  ;//while true
#forstmt;

//the second pass is doing interpretation.

print #(1, 2), 3;

print #[1, 2], 3;

//cast: 
(pack.bag 3)

#for a, b in ( (1,'a'), (2,'b')): //meta!
	print(''a'', '''b''', ''b''); //print(1, 'a', a);
	print("abc''a''def"); //in string
	print('''a'''); //quoted between apostrophe: print('1')
	print("""abc''a''def" x "and" y "OK!"""); //in template
	print("""''a''def" x "and" y "OK!"""); //in template
	print("""''a''" x """); //template
#;

#:loopy(names)=
	#for i in -1 .. len(names):
        friend["''names[i]''"]="''names[i+1]''";
	#;
#loopy;

class test:
	.:a = 1;
	def .t;
	.for i in ..b:;
;

//As #x indicates a code parameter,
//''x'' gives the code for x, which 
//is the same as C macro.
//For value parameter y, #y gives the code.
#:max(#x, y)= 
	(("''x''") if (''x'') > (''y'') : ("''#y''"))
#max;

#:max(#x, y): 
	(("''x''") if (''x'')>(''y'') : ("''#y''"));
#max;

//when quoted in apostrophe and could not be a char literal,
//then it is considered rawcode. 
#m = 3,4;
''max('x,y', m)''; //'x,y' is a whole piece (rawcode)



//here are some new idea:
//three types of macros: objects, functions, commands.
//but we will not support objects and functions:
//for they are not hygene and not essential, as
//object can be replaced by constants, and 
//functions can be replaced by (possibly inline) regular ones.
//so we will only support macro commands.
//we specify that macros MUST be defined before use, so 
//that we can parse the sorce code sequentially.

//object:
#Pi: 3.14159

#Pi: 3.14159

//function: (automatic bracketing)
#:min(a, b)=
   a>b?b:a 
#min; //same as: ((a)>(b)?(b):(a))

#:intpow(a, p)= //integral power
  #assert type(p) is int, "p must be integer!"
  #negpow = p<0
  #if negpow:  
    #p = -p
    1./(
  #if;
  1
  #for i in 0 .. p:
    *a
  #for;
  #if negpow:
    )
  #if;
#intpow;
 
//command:
#:forever = forever {block} :
   while true:
     block
   ;
#forever;

#:shufstmt= 'shuffle' exprlist:
	#for expr in exprlist:
		#assert expr.writable(), "each item must be writable!"
	#;
	exprlist = list(exprlist).shuffle();
#shufstmt;

//example with master/slave, pattern
#:repstmt= 'repeat' '{' block '}' 'until' cond:
   while true:
     #block
     break if cond;
   ;
#repstmt;

//example
repeat: //master macro
  print("ok!");
until cond; //slave macro

//now local variable
for #i in .. 5;
//global variable
$mygv = 2;

//exampel of nested macros (master+slaves)
#:casestmt = 'case' x {block}? 
      + 'in' lists* '{' blocks '}'
:
	$val = x;
	switch($val){
    	default: ''block''
	//nested block ('case' is master macro)
		#for exprs in lists, block in blocks:
		   #for expr in exprs:
			   case(#expr):
           #end
               #block 
               break;
		#end
	}
#casestmt;

case x:
in case: //default
	print("default");
in 1:
	print("one");
in 2:
	print("two");
in 3:
	print("three");
//in class Address:
;


/**
Some idea on creating a macro language.

1. any line that does not start with a macro command is treated as a string
2. if a string line happends to start with a macro command, use the backslash
   '\' to escape the macro command.
3. an inner macro is first expanded before being passed to the outer macro.
4. inside a macro def, only lines start with # are treated as macros, which
   may need be further expanded.
5. in a macro def, it is possible to declare the types of macro parameters,
   which will be parsed further according to their declared types when the 
   macro is being processed.
*/
